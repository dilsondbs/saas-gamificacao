<?php

namespace App\Services;

use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;
use Illuminate\Support\Facades\Log;

class GeminiAIService
{
    private $client;
    private $apiKey;
    private $baseUrl;

    public function __construct()
    {
        $this->client = new Client();
        $this->apiKey = config('services.gemini.api_key');
        $this->baseUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent';
    }

    /**
     * Gerar curso completo com IA
     */
    public function generateCourse($description, $targetAudience = null, $difficulty = 'intermediate')
    {
        $prompt = $this->buildCoursePrompt($description, $targetAudience, $difficulty);

        try {
            $response = $this->makeRequest($prompt, 'generate_course');
            $courseData = $this->parseCourseResponse($response);

            // Validar qualidade do conte√∫do gerado
            $quality = $this->validateContentQuality($courseData, 'course');

            Log::info('GeminiAI: Qualidade do curso avaliada', [
                'quality_score' => $quality['quality_score'],
                'is_valid' => $quality['is_valid'],
                'issues_count' => count($quality['issues'])
            ]);

            // Se qualidade muito baixa, usar fallback melhorado
            if ($quality['quality_score'] < 40) {
                Log::warning('GeminiAI: Qualidade insuficiente, usando fallback', $quality);
                return $this->getEnhancedFallbackCourse($description, $targetAudience, $difficulty);
            }

            return $courseData;

        } catch (\Exception $e) {
            Log::error('Erro ao gerar curso com Gemini: ' . $e->getMessage());
            return $this->getEnhancedFallbackCourse($description, $targetAudience, $difficulty);
        }
    }

    /**
     * Gerar curso a partir de conte√∫do extra√≠do de arquivo
     */
    public function generateCourseFromContent($extractedContent, $title, $targetAudience = null, $difficulty = 'intermediate')
    {
        $prompt = $this->buildCourseFromContentPrompt($extractedContent, $title, $targetAudience, $difficulty);

        try {
            Log::info('ü§ñ Gerando curso com IA a partir do conte√∫do do arquivo', [
                'content_length' => strlen($extractedContent),
                'title' => $title,
                'target_audience' => $targetAudience,
                'difficulty' => $difficulty,
            ]);

            $response = $this->makeRequest($prompt, 'generate_course');
            $courseData = $this->parseCourseResponse($response);

            // Aplicar melhorias espec√≠ficas para conte√∫do real
            $courseData = $this->enhanceWithRealContent($courseData, $extractedContent);

            // Aplicar Gates de Progress√£o e Micro-learning
            $courseData = $this->applyGameProgressionRules($courseData);

            Log::info('‚úÖ Curso gerado com sucesso a partir do conte√∫do', [
                'title' => $courseData['title'] ?? 'Sem t√≠tulo',
                'modules_count' => count($courseData['modules'] ?? []),
                'activities_count' => $this->countActivities($courseData),
            ]);

            return $courseData;

        } catch (\Exception $e) {
            Log::error('‚ùå Erro ao gerar curso com conte√∫do real', [
                'message' => $e->getMessage(),
                'file' => $e->getFile(),
                'line' => $e->getLine(),
                'trace' => $e->getTraceAsString(),
                'title' => $title,
                'content_length' => strlen($extractedContent),
                'content_preview' => substr($extractedContent, 0, 200)
            ]);
            return $this->getEnhancedFallbackCourseFromContent($extractedContent, $title, $targetAudience, $difficulty);
        }
    }

    /**
     * Gerar atividades gamificadas
     */
    public function generateGamifiedActivities($courseTitle, $topic, $count = 5)
    {
        $prompt = $this->buildActivitiesPrompt($courseTitle, $topic, $count);

        try {
            $response = $this->makeRequest($prompt, 'generate_activities');
            return $this->parseActivitiesResponse($response);
        } catch (\Exception $e) {
            Log::error('Erro ao gerar atividades com Gemini: ' . $e->getMessage());
            return $this->getFallbackActivities($topic, $count);
        }
    }

    /**
     * Gerar badges personalizadas
     */
    public function generateBadges($courseTitle, $topics = [])
    {
        $prompt = $this->buildBadgesPrompt($courseTitle, $topics);

        try {
            $response = $this->makeRequest($prompt, 'generate_badges');
            return $this->parseBadgesResponse($response);
        } catch (\Exception $e) {
            Log::error('Erro ao gerar badges com Gemini: ' . $e->getMessage());
            return $this->getFallbackBadges($courseTitle);
        }
    }

    /**
     * Gerar conte√∫do para canvas visual
     */
    public function generateCanvasContent($topic, $visualType = 'mindmap')
    {
        $prompt = $this->buildCanvasPrompt($topic, $visualType);

        try {
            $response = $this->makeRequest($prompt, 'generate_canvas');
            return $this->parseCanvasResponse($response);
        } catch (\Exception $e) {
            Log::error('Erro ao gerar canvas com Gemini: ' . $e->getMessage());
            return $this->getFallbackCanvas($topic);
        }
    }

    /**
     * Fazer requisi√ß√£o para API do Gemini
     */
    private function makeRequest($prompt, $action = 'api_call')
    {
        Log::info('GeminiAI: Iniciando requisi√ß√£o', [
            'prompt_length' => strlen($prompt),
            'api_key_configured' => !empty($this->apiKey),
            'action' => $action
        ]);

        try {
            $response = $this->client->post($this->baseUrl . '?key=' . $this->apiKey, [
                'headers' => [
                    'Content-Type' => 'application/json',
                ],
                'json' => [
                    'contents' => [
                        [
                            'parts' => [
                                ['text' => $prompt]
                            ]
                        ]
                    ],
                    'generationConfig' => [
                        'temperature' => 0.9,  // Mais criativo
                        'topK' => 40,
                        'topP' => 0.95,
                        'maxOutputTokens' => 32768  // Gemini 2.5 Flash suporta at√© 32768
                    ]
                ]
            ]);

            $body = $response->getBody()->getContents();
            $decoded = json_decode($body, true);

            // Extrair informa√ß√µes de uso de tokens
            $inputTokens = $decoded['usageMetadata']['promptTokenCount'] ?? null;
            $outputTokens = $decoded['usageMetadata']['candidatesTokenCount'] ?? null;

            Log::info('GeminiAI: Resposta recebida', [
                'status' => $response->getStatusCode(),
                'response_length' => strlen($body),
                'has_candidates' => isset($decoded['candidates']),
                'input_tokens' => $inputTokens,
                'output_tokens' => $outputTokens
            ]);

            // Registrar uso da API
            $this->logUsage($action, $inputTokens, $outputTokens);

            return $decoded;

        } catch (\Exception $e) {
            Log::error('GeminiAI: Erro na requisi√ß√£o', [
                'error' => $e->getMessage(),
                'code' => $e->getCode(),
                'api_url' => $this->baseUrl
            ]);

            // Re-throw para usar fallback
            throw $e;
        }
    }

    /**
     * Construir prompt para gera√ß√£o de curso
     */
    private function buildCoursePrompt($description, $targetAudience, $difficulty)
    {
        return "Voc√™ √© um PEDAGOGO ESPECIALISTA em design instrucional e cria√ß√£o de cursos educacionais de alt√≠ssima qualidade.

CRIE um curso EXCEPCIONAL e ALTAMENTE ENVOLVENTE em portugu√™s brasileiro:

üéØ DESCRI√á√ÉO DO CURSO: {$description}
üë• P√öBLICO-ALVO: " . ($targetAudience ?: 'P√∫blico geral') . "
üìä N√çVEL: {$difficulty}

DIRETRIZES ESPEC√çFICAS:
‚úì Crie um t√≠tulo CATIVANTE e PROFISSIONAL (m√°x 60 caracteres)
‚úì Desenvolva 3-5 m√≥dulos com PROGRESS√ÉO L√ìGICA
‚úì Cada m√≥dulo deve ter 2-4 aulas DENSAS e PR√ÅTICAS
‚úì Adapte a linguagem e complexidade para o p√∫blico-alvo
‚úì Inclua conte√∫do ACION√ÅVEL e APLIC√ÅVEL
‚úì Objetivos de aprendizagem ESPEC√çFICOS e MENSUR√ÅVEIS

üìù RESPONDA EXCLUSIVAMENTE EM JSON V√ÅLIDO:

{
  \"title\": \"T√≠tulo profissional e atrativo do curso\",
  \"description\": \"Descri√ß√£o envolvente que desperte interesse (m√°x 200 palavras)\",
  \"duration_hours\": 15,
  \"target_audience\": \"{$targetAudience}\",
  \"difficulty\": \"{$difficulty}\",
  \"modules\": [
    {
      \"title\": \"T√≠tulo do m√≥dulo\",
      \"description\": \"O que o aluno aprender√° neste m√≥dulo\",
      \"lessons\": [
        {
          \"title\": \"T√≠tulo da aula\",
          \"content\": \"Conte√∫do detalhado e pr√°tico da aula (m√≠n 100 palavras)\",
          \"duration_minutes\": 45
        }
      ]
    }
  ],
  \"learning_objectives\": [\"Objetivo espec√≠fico 1\", \"Objetivo espec√≠fico 2\", \"Objetivo espec√≠fico 3\"],
  \"prerequisites\": [\"Pr√©-requisito relevante\"],
  \"assessment_methods\": [\"M√©todo de avalia√ß√£o 1\", \"M√©todo de avalia√ß√£o 2\"]
}";
    }

    /**
     * Construir prompt para atividades gamificadas
     */
    private function buildActivitiesPrompt($courseTitle, $topic, $count)
    {
        return "Voc√™ √© um GAME DESIGNER EDUCACIONAL especialista em criar atividades ALTAMENTE ENVOLVENTES e GAMIFICADAS.

CRIE {$count} atividades INCR√çVEIS para:
üéØ CURSO: '{$courseTitle}'
üìö T√ìPICO: '{$topic}'

CRIT√âRIOS DE EXCEL√äNCIA:
‚úì Atividades DIVERSIFICADAS (quiz, desafio, simula√ß√£o, jogo)
‚úì Mec√¢nicas de GAMIFICA√á√ÉO (pontos, n√≠veis, conquistas)
‚úì Instru√ß√µes CLARAS e MOTIVADORAS
‚úì Perguntas DESAFIADORAS e BEM ELABORADAS
‚úì Feedback CONSTRUTIVO em cada resposta
‚úì Tempo REALISTA para execu√ß√£o

üìù RESPONDA EXCLUSIVAMENTE EM JSON V√ÅLIDO:

{
  \"activities\": [
    {
      \"title\": \"T√≠tulo cativante da atividade\",
      \"type\": \"quiz|challenge|simulation|game|exercise\",
      \"description\": \"Descri√ß√£o motivadora que desperte curiosidade\",
      \"points\": 100,
      \"difficulty\": \"easy|medium|hard\",
      \"estimated_time\": 20,
      \"instructions\": \"Instru√ß√µes claras e envolventes\",
      \"content\": {
        \"questions\": [
          {
            \"question\": \"Pergunta desafiadora e contextualizada\",
            \"options\": [\"Op√ß√£o A realista\", \"Op√ß√£o B plaus√≠vel\", \"Op√ß√£o C distratora\", \"Op√ß√£o D criativa\"],
            \"correct_answer\": 0,
            \"explanation\": \"Explica√ß√£o detalhada e educativa\"
          }
        ]
      }
    }
  ]
}";
    }

    /**
     * Construir prompt para badges
     */
    private function buildBadgesPrompt($courseTitle, $topics)
    {
        $topicsText = implode(', ', $topics);

        return "Voc√™ √© um ESPECIALISTA em PSICOLOGIA da MOTIVA√á√ÉO e GAMIFICA√á√ÉO EDUCACIONAL.

CRIE badges INSPIRADORAS e MOTIVADORAS para:
üéØ CURSO: '{$courseTitle}'
üìö T√ìPICOS: {$topicsText}

PRINC√çPIOS DE EXCEL√äNCIA:
‚úì Nomes CRIATIVOS e MEMOR√ÅVEIS
‚úì Descri√ß√µes que INSPIREM o aluno
‚úì √çcones VISUAL e EMOCIONALMENTE relevantes
‚úì Cores que REPRESENTEM a conquista
‚úì Crit√©rios CLAROS e ALCAN√á√ÅVEIS
‚úì Sistema de RARIDADE balanceado
‚úì Pontua√ß√£o PROPORCIONAL √† dificuldade

üìù RESPONDA EXCLUSIVAMENTE EM JSON V√ÅLIDO:

{
  \"badges\": [
    {
      \"name\": \"Nome criativo e inspirador\",
      \"description\": \"Descri√ß√£o motivadora da conquista\",
      \"icon\": \"üèÜ\",
      \"color\": \"#FFD700\",
      \"criteria\": \"Crit√©rios claros e espec√≠ficos\",
      \"points\": 75,
      \"rarity\": \"common|rare|epic|legendary\"
    }
  ]
}";
    }

    /**
     * Construir prompt para canvas visual
     */
    private function buildCanvasPrompt($topic, $visualType)
    {
        return "Crie um mapa visual/canvas interativo sobre '{$topic}' no formato '{$visualType}'.

IMPORTANTE: Responda APENAS em formato JSON v√°lido, sem texto adicional.

Estrutura necess√°ria:
{
  \"canvas\": {
    \"title\": \"T√≠tulo do canvas\",
    \"type\": \"{$visualType}\",
    \"elements\": [
      {
        \"id\": \"element_1\",
        \"type\": \"node|connection|text|shape\",
        \"x\": 100,
        \"y\": 100,
        \"width\": 150,
        \"height\": 80,
        \"text\": \"Texto do elemento\",
        \"color\": \"#4A90E2\",
        \"connections\": [\"element_2\"]
      }
    ],
    \"interactions\": [
      {
        \"element_id\": \"element_1\",
        \"action\": \"click\",
        \"response\": \"Informa√ß√£o adicional\",
        \"points\": 10
      }
    ]
  }
}";
    }

    /**
     * Parse da resposta do curso
     */
    private function parseCourseResponse($response)
    {
        if (!isset($response['candidates'][0]['content']['parts'][0]['text'])) {
            Log::error('GeminiAI: Estrutura de resposta inv√°lida', ['response' => $response]);
            throw new \Exception('Resposta inv√°lida da API');
        }

        $content = $response['candidates'][0]['content']['parts'][0]['text'];
        Log::info('GeminiAI: Conte√∫do bruto recebido', [
            'content_preview' => substr($content, 0, 200),
            'content_length' => strlen($content)
        ]);

        // Limpar markdown se houver
        $content = preg_replace('/```json\s*/', '', $content);
        $content = preg_replace('/```\s*$/', '', $content);
        $content = trim($content);

        // Sanitizar JSON: remover caracteres problem√°ticos mas preservar estrutura
        $content = preg_replace('/[\x00-\x08\x0B\x0C\x0E-\x1F]/u', '', $content);

        // Se ainda houver erro, tentar com mb_convert_encoding
        $courseData = json_decode($content, true);
        if (json_last_error() !== JSON_ERROR_NONE && json_last_error() == JSON_ERROR_CTRL_CHAR) {
            // Tentar convers√£o de encoding
            $content = mb_convert_encoding($content, 'UTF-8', 'UTF-8');
            $courseData = json_decode($content, true);
        }

        if (json_last_error() !== JSON_ERROR_NONE) {
            Log::error('GeminiAI: Erro de JSON parsing', [
                'json_error' => json_last_error_msg(),
                'json_error_code' => json_last_error(),
                'content_sample' => substr($content, 0, 500),
                'content_hex' => bin2hex(substr($content, 0, 100))
            ]);
            throw new \Exception('JSON inv√°lido na resposta: ' . json_last_error_msg());
        }

        Log::info('GeminiAI: Curso parseado com sucesso', [
            'title' => $courseData['title'] ?? 'N/A',
            'modules_count' => count($courseData['modules'] ?? [])
        ]);

        return $this->validateAndEnhanceCourse($courseData);
    }

    /**
     * Parse da resposta de atividades
     */
    private function parseActivitiesResponse($response)
    {
        if (!isset($response['candidates'][0]['content']['parts'][0]['text'])) {
            throw new \Exception('Resposta inv√°lida da API');
        }

        $content = $response['candidates'][0]['content']['parts'][0]['text'];
        $activitiesData = json_decode($content, true);

        if (json_last_error() !== JSON_ERROR_NONE) {
            throw new \Exception('JSON inv√°lido na resposta: ' . json_last_error_msg());
        }

        return $activitiesData;
    }

    /**
     * Parse da resposta de badges
     */
    private function parseBadgesResponse($response)
    {
        if (!isset($response['candidates'][0]['content']['parts'][0]['text'])) {
            throw new \Exception('Resposta inv√°lida da API');
        }

        $content = $response['candidates'][0]['content']['parts'][0]['text'];
        $badgesData = json_decode($content, true);

        if (json_last_error() !== JSON_ERROR_NONE) {
            throw new \Exception('JSON inv√°lido na resposta: ' . json_last_error_msg());
        }

        return $badgesData;
    }

    /**
     * Parse da resposta do canvas
     */
    private function parseCanvasResponse($response)
    {
        if (!isset($response['candidates'][0]['content']['parts'][0]['text'])) {
            throw new \Exception('Resposta inv√°lida da API');
        }

        $content = $response['candidates'][0]['content']['parts'][0]['text'];
        $canvasData = json_decode($content, true);

        if (json_last_error() !== JSON_ERROR_NONE) {
            throw new \Exception('JSON inv√°lido na resposta: ' . json_last_error_msg());
        }

        return $canvasData;
    }

    /**
     * Fallback para curso (quando API falha)
     */
    private function getEnhancedFallbackCourse($description, $targetAudience = null, $difficulty = 'intermediate')
    {
        // Extrair palavras-chave da descri√ß√£o
        $keywords = $this->extractKeywords($description);
        $subject = $this->detectSubjectFromDescription($description);

        return [
            'title' => $this->generateIntelligentTitle($subject, $targetAudience),
            'description' => $this->generateIntelligentDescription($description, $targetAudience, $difficulty),
            'duration_hours' => $this->calculateDurationByDifficulty($difficulty),
            'target_audience' => $targetAudience ?: 'P√∫blico geral',
            'difficulty' => $difficulty,
            'modules' => $this->generateIntelligentModules($subject, $keywords, $difficulty),
            'learning_objectives' => $this->generateIntelligentObjectives($subject, $difficulty),
            'prerequisites' => $this->generateIntelligentPrerequisites($difficulty),
            'assessment_methods' => $this->generateIntelligentAssessments($difficulty)
        ];
    }

    private function extractKeywords($description)
    {
        // Remover palavras comuns e extrair conceitos importantes
        $stopWords = ['de', 'da', 'do', 'para', 'com', 'em', 'um', 'uma', 'curso', 'sobre'];
        $words = preg_split('/\s+/', strtolower($description));

        return array_filter($words, function($word) use ($stopWords) {
            return strlen($word) > 3 && !in_array($word, $stopWords);
        });
    }

    private function detectSubjectFromDescription($description)
    {
        $subjects = [
            'matem√°tica' => 'Matem√°tica',
            'programa√ß√£o' => 'Programa√ß√£o',
            'marketing' => 'Marketing Digital',
            'gest√£o' => 'Gest√£o Empresarial',
            'design' => 'Design',
            'ingl√™s' => 'Ingl√™s',
            'hist√≥ria' => 'Hist√≥ria',
            'ci√™ncias' => 'Ci√™ncias',
            'f√≠sica' => 'F√≠sica',
            'qu√≠mica' => 'Qu√≠mica'
        ];

        $desc = strtolower($description);
        foreach ($subjects as $keyword => $subject) {
            if (strpos($desc, $keyword) !== false) {
                return $subject;
            }
        }

        return 'Educa√ß√£o Geral';
    }

    private function generateIntelligentTitle($subject, $targetAudience)
    {
        $templates = [
            'Dominando {subject}: Guia Completo',
            '{subject} na Pr√°tica',
            'Curso Completo de {subject}',
            '{subject}: Do B√°sico ao Avan√ßado'
        ];

        $template = $templates[array_rand($templates)];
        $title = str_replace('{subject}', $subject, $template);

        if ($targetAudience) {
            $title .= ' para ' . $targetAudience;
        }

        return $title;
    }

    private function generateIntelligentDescription($description, $targetAudience, $difficulty)
    {
        $levelTexts = [
            'beginner' => 'Curso introdut√≥rio perfeito para iniciantes',
            'intermediate' => 'Curso abrangente com conte√∫do pr√°tico',
            'advanced' => 'Curso avan√ßado para profissionais experientes'
        ];

        $baseText = $levelTexts[$difficulty] ?? $levelTexts['intermediate'];

        if ($targetAudience) {
            $baseText .= ' especialmente desenvolvido para ' . strtolower($targetAudience);
        }

        return $baseText . '. ' . ucfirst($description) . ' Aprenda com metodologia pr√°tica e exemplos reais.';
    }

    private function calculateDurationByDifficulty($difficulty)
    {
        return match($difficulty) {
            'beginner' => 8,
            'intermediate' => 15,
            'advanced' => 25,
            default => 12
        };
    }

    private function generateIntelligentModules($subject, $keywords, $difficulty)
    {
        $moduleTemplates = [
            'beginner' => [
                'Fundamentos de {subject}',
                'Conceitos Essenciais',
                'Primeiros Passos Pr√°ticos',
                'Exerc√≠cios B√°sicos'
            ],
            'intermediate' => [
                'Fundamentos de {subject}',
                'T√©cnicas Intermedi√°rias',
                'Aplica√ß√µes Pr√°ticas',
                'Projetos Reais',
                'Otimiza√ß√£o e Boas Pr√°ticas'
            ],
            'advanced' => [
                'Revis√£o de Conceitos Avan√ßados',
                'T√©cnicas Especializadas',
                'Arquiteturas Complexas',
                'Casos de Estudo Avan√ßados',
                'Tend√™ncias e Futuro',
                'Certifica√ß√£o e Especializa√ß√£o'
            ]
        ];

        $templates = $moduleTemplates[$difficulty] ?? $moduleTemplates['intermediate'];
        $modules = [];

        foreach ($templates as $index => $template) {
            $moduleTitle = str_replace('{subject}', $subject, $template);

            $modules[] = [
                'title' => $moduleTitle,
                'description' => $this->generateModuleDescription($moduleTitle, $difficulty),
                'lessons' => $this->generateIntelligentLessons($moduleTitle, $difficulty)
            ];
        }

        return $modules;
    }

    private function generateModuleDescription($moduleTitle, $difficulty)
    {
        $descriptions = [
            'beginner' => "M√≥dulo introdut√≥rio que aborda {title} de forma did√°tica e acess√≠vel.",
            'intermediate' => "M√≥dulo pr√°tico focado em {title} com exerc√≠cios e casos reais.",
            'advanced' => "M√≥dulo especializado em {title} para profissionais experientes."
        ];

        $template = $descriptions[$difficulty] ?? $descriptions['intermediate'];
        return str_replace('{title}', strtolower($moduleTitle), $template);
    }

    private function generateIntelligentLessons($moduleTitle, $difficulty)
    {
        $lessonCount = match($difficulty) {
            'beginner' => 3,
            'intermediate' => 4,
            'advanced' => 5,
            default => 3
        };

        $lessons = [];
        for ($i = 1; $i <= $lessonCount; $i++) {
            $lessons[] = [
                'title' => "Aula {$i}: " . $this->generateLessonTitle($moduleTitle, $i, $difficulty),
                'content' => $this->generateLessonContent($moduleTitle, $i, $difficulty),
                'duration_minutes' => $this->calculateLessonDuration($difficulty)
            ];
        }

        return $lessons;
    }

    private function generateLessonTitle($moduleTitle, $lessonNumber, $difficulty)
    {
        $templates = [
            1 => ['Introdu√ß√£o', 'Fundamentos', 'Conceitos B√°sicos'],
            2 => ['Desenvolvimento', 'Aplica√ß√£o Pr√°tica', 'Exerc√≠cios'],
            3 => ['Casos Pr√°ticos', 'Exemplos Reais', 'Projeto'],
            4 => ['T√©cnicas Avan√ßadas', 'Otimiza√ß√£o', 'Melhores Pr√°ticas'],
            5 => ['Certifica√ß√£o', 'Projeto Final', 'Conclus√£o']
        ];

        $options = $templates[$lessonNumber] ?? ['Desenvolvimento'];
        return $options[array_rand($options)] . ' de ' . $moduleTitle;
    }

    private function generateLessonContent($moduleTitle, $lessonNumber, $difficulty)
    {
        $baseContent = "Nesta aula, voc√™ ir√° aprender sobre os aspectos fundamentais de {$moduleTitle}. ";

        $additionalContent = match($difficulty) {
            'beginner' => "Come√ßaremos com conceitos b√°sicos e exemplos simples para facilitar o entendimento. Ao final, voc√™ ter√° uma base s√≥lida para prosseguir.",
            'intermediate' => "Abordaremos t√©cnicas pr√°ticas e casos reais da ind√∫stria. Voc√™ desenvolver√° habilidades aplic√°veis no mercado de trabalho.",
            'advanced' => "Exploraremos t√©cnicas especializadas e arquiteturas complexas. Este conte√∫do √© destinado a profissionais que buscam excel√™ncia t√©cnica.",
            default => "Combinaremos teoria e pr√°tica para um aprendizado completo e eficaz."
        };

        return $baseContent . $additionalContent;
    }

    private function calculateLessonDuration($difficulty)
    {
        return match($difficulty) {
            'beginner' => 30,
            'intermediate' => 45,
            'advanced' => 60,
            default => 40
        };
    }

    private function generateIntelligentObjectives($subject, $difficulty)
    {
        $baseObjectives = [
            "Dominar os conceitos fundamentais de {$subject}",
            "Aplicar conhecimentos em situa√ß√µes pr√°ticas",
            "Desenvolver projetos relacionados √† √°rea"
        ];

        $advancedObjectives = [
            "Implementar solu√ß√µes complexas em {$subject}",
            "Otimizar processos e metodologias",
            "Liderar projetos e equipes na √°rea"
        ];

        $objectives = $baseObjectives;
        if ($difficulty === 'advanced') {
            $objectives = array_merge($objectives, $advancedObjectives);
        }

        return array_map(function($objective) use ($subject) {
            return str_replace('{subject}', $subject, $objective);
        }, $objectives);
    }

    private function generateIntelligentPrerequisites($difficulty)
    {
        return match($difficulty) {
            'beginner' => ['Nenhum conhecimento pr√©vio necess√°rio'],
            'intermediate' => ['Conhecimentos b√°sicos na √°rea', 'Experi√™ncia com conceitos fundamentais'],
            'advanced' => ['Experi√™ncia profissional na √°rea', 'Conhecimento avan√ßado de conceitos'],
            default => ['Conhecimento b√°sico']
        };
    }

    private function generateIntelligentAssessments($difficulty)
    {
        $basic = ['Quiz interativo', 'Exerc√≠cios pr√°ticos'];
        $intermediate = ['Projetos pr√°ticos', 'Estudos de caso', 'Avalia√ß√µes por pares'];
        $advanced = ['Projeto final complexo', 'Apresenta√ß√£o t√©cnica', 'Peer review', 'Portfolio profissional'];

        return match($difficulty) {
            'beginner' => $basic,
            'intermediate' => array_merge($basic, $intermediate),
            'advanced' => array_merge($basic, $intermediate, $advanced),
            default => $basic
        };
    }

    /**
     * Fallback para atividades
     */
    private function getFallbackActivities($topic, $count)
    {
        $activities = [];
        for ($i = 1; $i <= $count; $i++) {
            $activities[] = [
                'title' => "Atividade {$i} sobre {$topic}",
                'type' => 'quiz',
                'description' => "Atividade pr√°tica sobre {$topic}",
                'points' => 50,
                'difficulty' => 'medium',
                'estimated_time' => 10,
                'instructions' => 'Complete esta atividade para ganhar pontos.',
                'content' => [
                    'questions' => [
                        [
                            'question' => "Qual √© um conceito importante sobre {$topic}?",
                            'options' => ['Op√ß√£o A', 'Op√ß√£o B', 'Op√ß√£o C', 'Op√ß√£o D'],
                            'correct_answer' => 0,
                            'explanation' => 'Esta √© a resposta correta.'
                        ]
                    ]
                ]
            ];
        }

        return ['activities' => $activities];
    }

    /**
     * Fallback para badges
     */
    private function getFallbackBadges($courseTitle)
    {
        return [
            'badges' => [
                [
                    'name' => 'Iniciante',
                    'description' => 'Completou a primeira aula',
                    'icon' => 'üåü',
                    'color' => '#4CAF50',
                    'criteria' => 'Complete a primeira aula do curso',
                    'points' => 25,
                    'rarity' => 'common'
                ],
                [
                    'name' => 'Explorador',
                    'description' => 'Completou metade do curso',
                    'icon' => 'üöÄ',
                    'color' => '#2196F3',
                    'criteria' => 'Complete 50% das atividades',
                    'points' => 100,
                    'rarity' => 'rare'
                ]
            ]
        ];
    }

    /**
     * Fallback para canvas
     */
    private function getFallbackCanvas($topic)
    {
        return [
            'canvas' => [
                'title' => "Mapa Mental: {$topic}",
                'type' => 'mindmap',
                'elements' => [
                    [
                        'id' => 'center',
                        'type' => 'node',
                        'x' => 400,
                        'y' => 300,
                        'width' => 150,
                        'height' => 80,
                        'text' => $topic,
                        'color' => '#4A90E2',
                        'connections' => ['concept1', 'concept2']
                    ],
                    [
                        'id' => 'concept1',
                        'type' => 'node',
                        'x' => 200,
                        'y' => 200,
                        'width' => 120,
                        'height' => 60,
                        'text' => 'Conceito 1',
                        'color' => '#50C878',
                        'connections' => []
                    ],
                    [
                        'id' => 'concept2',
                        'type' => 'node',
                        'x' => 600,
                        'y' => 200,
                        'width' => 120,
                        'height' => 60,
                        'text' => 'Conceito 2',
                        'color' => '#FF6B6B',
                        'connections' => []
                    ]
                ],
                'interactions' => [
                    [
                        'element_id' => 'center',
                        'action' => 'click',
                        'response' => "Explore mais sobre {$topic}",
                        'points' => 10
                    ]
                ]
            ]
        ];
    }

    /**
     * Validar e melhorar dados do curso gerado
     */
    private function validateAndEnhanceCourse($courseData)
    {
        // Garantir campos obrigat√≥rios
        $courseData['title'] = $courseData['title'] ?? 'Curso Gerado por IA';
        $courseData['description'] = $courseData['description'] ?? 'Curso educacional criado com intelig√™ncia artificial.';
        $courseData['duration_hours'] = $courseData['duration_hours'] ?? 10;
        $courseData['target_audience'] = $courseData['target_audience'] ?? 'P√∫blico geral';
        $courseData['difficulty'] = $courseData['difficulty'] ?? 'intermediate';

        // Validar e melhorar m√≥dulos
        if (!isset($courseData['modules']) || !is_array($courseData['modules']) || empty($courseData['modules'])) {
            $courseData['modules'] = $this->generateDefaultModules($courseData['title']);
        }

        // Melhorar cada m√≥dulo
        foreach ($courseData['modules'] as &$module) {
            $module['title'] = $module['title'] ?? 'M√≥dulo';
            $module['description'] = $module['description'] ?? 'Descri√ß√£o do m√≥dulo';

            if (!isset($module['lessons']) || !is_array($module['lessons'])) {
                $module['lessons'] = $this->generateDefaultLessons($module['title']);
            }
        }

        // Garantir objetivos e pr√©-requisitos
        $courseData['learning_objectives'] = $courseData['learning_objectives'] ?? [
            'Compreender os conceitos fundamentais',
            'Aplicar conhecimentos pr√°ticos',
            'Desenvolver habilidades espec√≠ficas da √°rea'
        ];

        $courseData['prerequisites'] = $courseData['prerequisites'] ?? ['Conhecimento b√°sico'];
        $courseData['assessment_methods'] = $courseData['assessment_methods'] ?? ['Quiz', 'Exerc√≠cios pr√°ticos'];

        return $courseData;
    }

    /**
     * Gerar m√≥dulos padr√£o quando IA falha
     */
    private function generateDefaultModules($courseTitle)
    {
        return [
            [
                'title' => 'Introdu√ß√£o ao ' . $courseTitle,
                'description' => 'Fundamentos e conceitos b√°sicos',
                'lessons' => $this->generateDefaultLessons('Introdu√ß√£o')
            ],
            [
                'title' => 'Desenvolvimento Pr√°tico',
                'description' => 'Aplica√ß√£o dos conceitos aprendidos',
                'lessons' => $this->generateDefaultLessons('Pr√°tica')
            ],
            [
                'title' => 'Avan√ßado e Aplica√ß√µes',
                'description' => 'T√≥picos avan√ßados e casos pr√°ticos',
                'lessons' => $this->generateDefaultLessons('Avan√ßado')
            ]
        ];
    }

    /**
     * Gerar aulas padr√£o para m√≥dulos
     */
    private function generateDefaultLessons($moduleTitle)
    {
        return [
            [
                'title' => 'Conceitos de ' . $moduleTitle,
                'content' => 'Nesta aula abordaremos os conceitos fundamentais relacionados a ' . $moduleTitle . '.',
                'duration_minutes' => 30
            ],
            [
                'title' => 'Exerc√≠cios de ' . $moduleTitle,
                'content' => 'Vamos praticar com exerc√≠cios espec√≠ficos sobre ' . $moduleTitle . '.',
                'duration_minutes' => 45
            ]
        ];
    }

    /**
     * Validar qualidade do conte√∫do gerado
     */
    private function validateContentQuality($content, $type = 'course')
    {
        $issues = [];

        switch ($type) {
            case 'course':
                $issues = array_merge($issues, $this->validateCourseQuality($content));
                break;
            case 'activities':
                $issues = array_merge($issues, $this->validateActivitiesQuality($content));
                break;
            case 'badges':
                $issues = array_merge($issues, $this->validateBadgesQuality($content));
                break;
        }

        return [
            'is_valid' => empty($issues),
            'quality_score' => $this->calculateQualityScore($content, $issues),
            'issues' => $issues,
            'suggestions' => $this->getImprovementSuggestions($issues)
        ];
    }

    private function validateCourseQuality($course)
    {
        $issues = [];

        // Validar t√≠tulo
        if (empty($course['title']) || strlen($course['title']) < 10) {
            $issues[] = 'T√≠tulo muito curto ou vazio';
        }

        if (strpos(strtolower($course['title']), 'curso sobre curso') !== false) {
            $issues[] = 'T√≠tulo repetitivo ou mal formatado';
        }

        // Validar m√≥dulos
        if (!isset($course['modules']) || count($course['modules']) < 2) {
            $issues[] = 'Poucos m√≥dulos (m√≠nimo 2)';
        }

        if (isset($course['modules'])) {
            foreach ($course['modules'] as $module) {
                if (!isset($module['lessons']) || count($module['lessons']) < 2) {
                    $issues[] = 'M√≥dulo com poucas aulas: ' . ($module['title'] ?? 'Sem t√≠tulo');
                }
            }
        }

        // Validar objetivos
        if (!isset($course['learning_objectives']) || count($course['learning_objectives']) < 3) {
            $issues[] = 'Poucos objetivos de aprendizagem';
        }

        return $issues;
    }

    private function validateActivitiesQuality($activities)
    {
        $issues = [];

        if (!isset($activities['activities']) || empty($activities['activities'])) {
            $issues[] = 'Nenhuma atividade gerada';
            return $issues;
        }

        foreach ($activities['activities'] as $index => $activity) {
            $activityNum = $index + 1;

            // Verificar t√≠tulos repetitivos
            if (preg_match('/^Atividade \d+ sobre/', $activity['title'] ?? '')) {
                $issues[] = "Atividade {$activityNum}: T√≠tulo gen√©rico e repetitivo";
            }

            // Verificar conte√∫do das quest√µes
            if (isset($activity['content']['questions'])) {
                foreach ($activity['content']['questions'] as $qIndex => $question) {
                    if (empty($question['explanation']) || strlen($question['explanation']) < 20) {
                        $issues[] = "Atividade {$activityNum}: Explica√ß√£o insuficiente na quest√£o " . ($qIndex + 1);
                    }
                }
            }
        }

        return $issues;
    }

    private function validateBadgesQuality($badges)
    {
        $issues = [];

        if (!isset($badges['badges']) || count($badges['badges']) < 3) {
            $issues[] = 'Poucas badges geradas (m√≠nimo 3)';
        }

        if (isset($badges['badges'])) {
            $names = array_column($badges['badges'], 'name');
            if (count($names) !== count(array_unique($names))) {
                $issues[] = 'Badges com nomes duplicados';
            }

            foreach ($badges['badges'] as $badge) {
                if (in_array($badge['name'] ?? '', ['Iniciante', 'Explorador', 'Mestre'])) {
                    $issues[] = 'Badge com nome muito gen√©rico: ' . ($badge['name'] ?? '');
                }
            }
        }

        return $issues;
    }

    private function calculateQualityScore($content, $issues)
    {
        $baseScore = 100;
        $deduction = count($issues) * 15; // 15 pontos por issue

        return max(0, min(100, $baseScore - $deduction));
    }

    private function getImprovementSuggestions($issues)
    {
        $suggestions = [];

        foreach ($issues as $issue) {
            if (strpos($issue, 'T√≠tulo') !== false) {
                $suggestions[] = 'Reformule o t√≠tulo para ser mais espec√≠fico e atrativo';
            } elseif (strpos($issue, 'Poucos m√≥dulos') !== false) {
                $suggestions[] = 'Adicione mais m√≥dulos para cobrir o conte√∫do adequadamente';
            } elseif (strpos($issue, 'repetitivo') !== false) {
                $suggestions[] = 'Diversifique t√≠tulos e descri√ß√µes para evitar repeti√ß√£o';
            }
        }

        return array_unique($suggestions);
    }

    /**
     * Construir prompt para gera√ß√£o de curso a partir de conte√∫do
     */
    private function buildCourseFromContentPrompt($content, $title, $targetAudience, $difficulty)
    {
        $audienceText = $targetAudience ? "para {$targetAudience}" : "para p√∫blico geral";
        $difficultyMap = [
            'beginner' => 'iniciante',
            'intermediate' => 'intermedi√°rio',
            'advanced' => 'avan√ßado'
        ];
        $difficultyText = $difficultyMap[$difficulty] ?? 'intermedi√°rio';

        // Gemini 2.5 Flash suporta contexto maior - usar at√© 15000 chars
        $limitedContent = mb_substr($content, 0, 15000);

        return "Voc√™ √© um EXPERT COURSE DESIGNER especializado em criar cursos COMPLETOS e ESTRUTURADOS.

üéØ MISS√ÉO: Criar curso COMPLETO '{$title}' n√≠vel {$difficultyText} {$audienceText}

üìÑ CONTE√öDO DO MATERIAL:
{$limitedContent}

üéì REQUISITOS OBRIGAT√ìRIOS:
‚úì Criar NO M√çNIMO 3-5 m√≥dulos progressivos
‚úì Cada m√≥dulo com 3-5 li√ß√µes bem estruturadas
‚úì Li√ß√µes de 8-15 minutos (micro-learning)
‚úì Usar CONTE√öDO REAL extra√≠do do material
‚úì Descri√ß√µes ESPEC√çFICAS baseadas no documento
‚úì Objetivos de aprendizado CLAROS para cada li√ß√£o
‚úì Tipos variados: lesson, reading, quiz, assignment
‚úì Pontua√ß√£o balanceada: li√ß√µes (10-15 pts), quizzes (20-25 pts)

üìù FORMATA√á√ÉO DO CONTE√öDO (OBRIGAT√ìRIO):
‚úì Usar HTML SEM√ÇNTICO estruturado
‚úì T√≠tulos: <h2> para se√ß√µes principais, <h3> para subse√ß√µes
‚úì Par√°grafos: <p> bem espa√ßados e informativos
‚úì Conceitos importantes: <strong>destacar com negrito</strong>
‚úì Termos t√©cnicos: <em>marcar em it√°lico</em>
‚úì Listas: <ul> ou <ol> para enumerar pontos
‚úì Dicas/Avisos: <blockquote>üí° Informa√ß√£o relevante</blockquote>
‚úì Tabelas: usar <table> para compara√ß√µes e dados estruturados
‚úì √çcones: usar emojis para visual (üìä üìà üí° ‚ö†Ô∏è ‚úÖ ‚ùå)
‚úì Conte√∫do M√çNIMO: 800 caracteres por li√ß√£o (rico e detalhado)

üé® EXEMPLO DE ESTRUTURA HTML:

<h2>üìö T√≠tulo da Se√ß√£o Principal</h2>
<p>Par√°grafo introdut√≥rio explicando o conceito de forma clara.</p>

<h3>Conceitos Fundamentais</h3>
<p>A <strong>sele√ß√£o de pessoal</strong> √© um processo cr√≠tico que envolve m√∫ltiplas etapas. O objetivo principal √© <em>identificar candidatos qualificados</em> atrav√©s de m√©todos estruturados.</p>

<blockquote>üí° <strong>Importante:</strong> A entrevista continua sendo o m√©todo mais utilizado, aparecendo em 95% dos processos seletivos.</blockquote>

<h3>üìä Compara√ß√£o de M√©todos</h3>
<table>
<thead>
<tr><th>M√©todo</th><th>Vantagens</th><th>Desvantagens</th></tr>
</thead>
<tbody>
<tr>
<td><strong>Entrevista</strong></td>
<td>‚úÖ Alto engajamento<br>‚úÖ Flex√≠vel</td>
<td>‚ùå Subjetiva<br>‚ùå Vi√©s potencial</td>
</tr>
<tr>
<td><strong>Testes</strong></td>
<td>‚úÖ Objetiva<br>‚úÖ Padronizada</td>
<td>‚ùå Limitada<br>‚ùå Ansiedade</td>
</tr>
</tbody>
</table>

<h3>Pontos-Chave para Memoriza√ß√£o</h3>
<ul>
<li><strong>Primeiro ponto importante:</strong> descri√ß√£o detalhada</li>
<li><strong>Segundo ponto cr√≠tico:</strong> explica√ß√£o com exemplo</li>
<li><strong>Terceiro conceito essencial:</strong> aplica√ß√£o pr√°tica</li>
</ul>

<blockquote>‚ö†Ô∏è <strong>Aten√ß√£o:</strong> Este conceito frequentemente aparece em avalia√ß√µes!</blockquote>

üìù RESPONDA EXCLUSIVAMENTE EM JSON V√ÅLIDO (sem markdown, sem coment√°rios):

{
  \"title\": \"{$title}\",
  \"description\": \"Descri√ß√£o completa do curso baseada no conte√∫do real\",
  \"difficulty\": \"{$difficulty}\",
  \"estimated_hours\": 8,
  \"points_per_completion\": 100,
  \"modules\": [
    {
      \"title\": \"T√≠tulo do m√≥dulo baseado no conte√∫do\",
      \"description\": \"Descri√ß√£o espec√≠fica do que ser√° aprendido\",
      \"order\": 1,
      \"lessons\": [
        {
          \"title\": \"T√≠tulo espec√≠fico da li√ß√£o\",
          \"content\": \"Conte√∫do RICO em HTML sem√¢ntico com <h2>, <h3>, <p>, <strong>, <em>, <ul>, <table>, <blockquote> e emojis (m√≠nimo 800 caracteres)\",
          \"duration_minutes\": 10,
          \"type\": \"lesson\",
          \"points\": 15,
          \"objectives\": [\"Objetivo 1\", \"Objetivo 2\"]
        },
        {
          \"title\": \"Quiz - Verifica√ß√£o de Conhecimento\",
          \"content\": \"Quiz baseado no conte√∫do anterior\",
          \"duration_minutes\": 15,
          \"type\": \"quiz\",
          \"points\": 25,
          \"required_score\": 70
        }
      ]
    }
  ]
}

IMPORTANTE: Use o CONTE√öDO REAL fornecido. N√£o invente informa√ß√µes gen√©ricas!";
    }

    /**
     * Aplicar regras de Gates de Progress√£o e Micro-learning
     */
    private function applyGameProgressionRules($courseData)
    {
        if (!isset($courseData['modules']) || !is_array($courseData['modules'])) {
            return $courseData;
        }

        $lessonCount = 0;

        foreach ($courseData['modules'] as $moduleIndex => &$module) {
            if (!isset($module['lessons']) || !is_array($module['lessons'])) {
                continue;
            }

            $newLessons = [];

            foreach ($module['lessons'] as $lessonIndex => $lesson) {
                // Aplicar micro-learning: for√ßar 5-15 minutos
                if (!isset($lesson['duration_minutes']) || $lesson['duration_minutes'] == 0) {
                    $lesson['duration_minutes'] = rand(5, 15);
                }

                // Garantir que est√° no range de micro-learning
                if ($lesson['duration_minutes'] > 15) {
                    $lesson['duration_minutes'] = 15;
                } elseif ($lesson['duration_minutes'] < 5) {
                    $lesson['duration_minutes'] = 5;
                }

                $newLessons[] = $lesson;
                $lessonCount++;

                // Gate de Progress√£o: Quiz a cada 4 li√ß√µes
                if ($lessonCount % 4 == 0 && $lesson['type'] !== 'quiz') {
                    $quizLesson = [
                        'title' => 'Quiz - Verifica√ß√£o de Progresso',
                        'content' => 'Quiz para verificar o aprendizado das √∫ltimas 4 li√ß√µes',
                        'duration_minutes' => 15,
                        'type' => 'quiz',
                        'points' => 25,
                        'required_score' => 70, // 70% m√≠nimo para prosseguir
                        'questions' => $this->generateQuizQuestions($lesson['content'] ?? 'Conte√∫do')
                    ];

                    $newLessons[] = $quizLesson;
                }
            }

            $module['lessons'] = $newLessons;
        }

        Log::info('üéØ Regras de gamifica√ß√£o aplicadas', [
            'total_lessons' => $lessonCount,
            'quizzes_added' => floor($lessonCount / 4),
            'micro_learning_enforced' => true
        ]);

        return $courseData;
    }

    /**
     * Gerar quest√µes de quiz b√°sicas
     */
    private function generateQuizQuestions($content)
    {
        return [
            [
                'question' => 'Com base no conte√∫do estudado, qual √© o conceito mais importante?',
                'options' => [
                    'Conceito A - Fundamental',
                    'Conceito B - Secund√°rio',
                    'Conceito C - Complementar',
                    'Conceito D - Opcional'
                ],
                'correct' => 0,
                'explanation' => 'O conceito A √© fundamental pois estabelece a base para todo o aprendizado.'
            ],
            [
                'question' => 'Qual √© a aplica√ß√£o pr√°tica do que foi aprendido?',
                'options' => [
                    'Aplica√ß√£o te√≥rica apenas',
                    'Aplica√ß√£o pr√°tica em projetos reais',
                    'Aplica√ß√£o limitada',
                    'N√£o h√° aplica√ß√£o'
                ],
                'correct' => 1,
                'explanation' => 'O conte√∫do sempre visa aplica√ß√£o pr√°tica em situa√ß√µes reais.'
            ]
        ];
    }

    /**
     * Melhorar curso com conte√∫do real extra√≠do
     */
    private function enhanceWithRealContent($courseData, $extractedContent)
    {
        // Por enquanto, apenas garantir que o conte√∫do est√° sendo usado
        // Em vers√µes futuras, fazer an√°lise mais sofisticada do conte√∫do

        Log::info('üöÄ Melhorando curso com conte√∫do real', [
            'content_chars' => strlen($extractedContent),
            'modules_count' => count($courseData['modules'] ?? [])
        ]);

        return $courseData;
    }

    /**
     * Contar atividades no curso
     */
    private function countActivities($courseData)
    {
        $count = 0;
        if (isset($courseData['modules'])) {
            foreach ($courseData['modules'] as $module) {
                if (isset($module['lessons'])) {
                    $count += count($module['lessons']);
                }
            }
        }
        return $count;
    }

    /**
     * Fallback melhorado para curso baseado em conte√∫do
     */
    private function getEnhancedFallbackCourseFromContent($content, $title, $targetAudience, $difficulty)
    {
        Log::info('üîÑ Usando fallback melhorado para curso com conte√∫do');

        return [
            'title' => $title,
            'description' => "Curso baseado no material fornecido: " . substr($content, 0, 100) . "...",
            'difficulty' => $difficulty,
            'estimated_hours' => 6,
            'points_per_completion' => 100,
            'modules' => [
                [
                    'title' => 'Introdu√ß√£o ao ' . $title,
                    'description' => 'M√≥dulo introdut√≥rio baseado no conte√∫do fornecido',
                    'lessons' => [
                        [
                            'title' => 'Conceitos Fundamentais',
                            'content' => 'Introdu√ß√£o aos conceitos apresentados no material: ' . substr($content, 0, 200),
                            'duration_minutes' => 10,
                            'type' => 'lesson',
                            'points' => 15
                        ],
                        [
                            'title' => 'Aprofundamento',
                            'content' => 'Detalhamento dos conceitos do material original',
                            'duration_minutes' => 12,
                            'type' => 'lesson',
                            'points' => 15
                        ],
                        [
                            'title' => 'Aplica√ß√£o Pr√°tica',
                            'content' => 'Exerc√≠cios pr√°ticos baseados no conte√∫do',
                            'duration_minutes' => 8,
                            'type' => 'assignment',
                            'points' => 20
                        ],
                        [
                            'title' => 'Quiz - Verifica√ß√£o',
                            'content' => 'Quiz para verificar o aprendizado',
                            'duration_minutes' => 15,
                            'type' => 'quiz',
                            'points' => 25,
                            'required_score' => 70,
                            'questions' => $this->generateQuizQuestions($content)
                        ]
                    ]
                ]
            ]
        ];
    }

    /**
     * Registrar uso da API Gemini
     */
    private function logUsage($action, $inputTokens = null, $outputTokens = null)
    {
        // Calcular custos com base na tabela de pre√ßos do Gemini
        $inputCost = ($inputTokens / 1000000) * 0.50;
        $outputCost = ($outputTokens / 1000000) * 1.50;
        $totalCost = $inputCost + $outputCost;

        // Obter tenant_id usando helper do sistema
        $tenantId = tenant_id();

        // Se n√£o houver tenant (dom√≠nio central), tentar pegar do usu√°rio
        if (!$tenantId && auth()->check()) {
            $tenantId = auth()->user()->tenant_id ?? null;
        }

        // S√≥ registrar se tiver tenant_id (obrigat√≥rio pela FK)
        if ($tenantId) {
            \App\Models\AiUsageLog::create([
                'tenant_id' => $tenantId,
                'user_id' => auth()->id() ?? null,
                'action' => $action,
                'input_tokens' => $inputTokens,
                'output_tokens' => $outputTokens,
                'cost_usd' => $totalCost,
                'model' => 'gemini-2.5-flash-preview'
            ]);

            Log::info('API Gemini: Uso registrado', [
                'tenant_id' => $tenantId,
                'action' => $action,
                'input_tokens' => $inputTokens,
                'output_tokens' => $outputTokens,
                'cost_usd' => round($totalCost, 6)
            ]);
        }
    }
}